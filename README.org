#+TITLE: Wire Cell Exchange Data in ROOT format

This package provides data structures and helpers for exchanging data in ROOT format between Wire Cell and other systems.

This package is independent from Wire Cell Toolkit (and Prototype).

* Install

This package uses a custom [[https://waf.io/][waf]] command called =wcb=.  

#+BEGIN_SRC sh
  git clone https://github.com/WireCell/wire-cell-xdata-root.git
  # or git clone git@github.com:WireCell/wire-cell-xdata-root.git
  cd wire-cell-xdata-root/
  ./wcb --prefix=/path/to/install configure build install
#+END_SRC

** For Wire Cell Prototype

To build the [[https://github.com/BNLIF/wire-cell][Wire Cell prototype]] against this package choose =--prefix= to be the same as used to build that package and it will pick it up.

In the prototype, its use can be seen in the [[https://github.com/BNLIF/wire-cell-2dtoy/blob/master/apps/2dtoy-shower3d-xdata.cxx][2dtoy-shower3d-xdata]] app which can convert from an internal data format.

** For Wire Cell Toolkit

t.b.d.

* Overview of data

** CAVEAT

The data model that Xdata follows is driven by the requirements for efficient ROOT I/O.  It is not necessarily intended to provide convent patterns for use in algorithm development.  Users of this package are expected to convert Xdata into some format suited to their problem.  Please do *not* use Xdata in anything other than converters.

** Identifiers

References from one object to another in Xdata is done through an identifying number ("ID" or "ident" in places).  The ID number of a particular object must be unique among all objects of that class up to some context.  An ID can, but need not be, an index into a collection.  In some cases, such as Cell ID, there are requirements on how they are formed.

** Dependencies

A dependency graph between the Xdata objects is shown in the following graph:

[[./doc/deps.png]]

The legend:

- box :: classes used to define top-level ROOT =TTree= branches
- circle :: ROOT =TClonesArray= of the named data type
- ellipse :: simple struct
- solid diamond :: aggregation through ownership
- dashed diamond :: referencing through ID

** Trees

The boxes in the above figure indicate the classes used to define top-level branches of their own ROOT trees.

- geom :: A =Geom= object provides spatial context for other data.  It directly provides information about parameters describing wires planes, the set of wires (ID and physical endpoints) associated with those parameters and the cells generated from the wires.  It is possible for multiple =Geom= objects to exist in the file.
- runinfo :: A =RunInfo= object provides meta data about a contiguous running of the DAQ or MC.
- trigger :: The trigger provides a temporal context so any time information in other objects is w.r.t. it.  Multiple triggers are associated with a particular runinfo.
- frame :: A frame contains a collection of "decos", objects which contain information about the deconvolved charge from the channels all at a given time slice.  The time slices are integral bins measured with respect to the trigger time.  A frame references both geom (space) and trigger (time).
- image :: an image contains a number of /blobs/.  Each blob associates a number of cells and a time slice with an amount of reconstructed charge.  An image references the frame from which the decos were used in collecting the blobs.  To accommodate different algorithms, multiple images may reference the same frame.  An image need not collect all possible activity and thus can be used identify some subset (or "cluster") of blobs.
- field :: a field zero or more values defined on Cartesian 3D points.  A field is both space (geom) and time (trigger) context.

* Reading and Writing

Because Xdata objects are all simple structs, Xdata ROOT files can be read with no special software (beyond ROOT).  
However, by first linking the dictionaries provided by this package one can avoid warnings.
This package also provides some helper utilities that make reading easier.

The =WireCellXdataRoot::Reader= packages up the structure of the TFile with easy-to-use readers making use of =TTreeReader= mechanism.  See [[./test/test_xdata_root.cxx]] for example.

The =WireCellXdataRoot::Writer= helps to make Xdata compliant ROOT files.  Again, see [[./test/test_xdata_root.cxx]] for example.



* Status

This section holds some transient status info.

** Conversion of shower3D

The prototype produces a "shower3D" file which should be considered internal and not proliferated.  Its conversion to Wire Cell Xdata ROOT is used as an initial test.  That file contains simple dumps of transient objects that are not well suited to saving directly to ROOT.  This leads to both time and space bloat:

#+BEGIN_EXAMPLE
$ ./build/2dtoy/2dtoy-shower3d-xdata ../shower3D_cluster_22_4.root ../foo.root
Loading 467373 entries of TC
Loading 52415 entries of T_true
Loading 587542 entries of T_rec
Loading 405447 entries of T_rec_charge
shower3d read time: 5.80891s
xdata packing time: 4.5058s
Writing xdata:
	4487 wires
	3734 cells
	16567 blobs
	3 fields
Write xdata in 0.77918s
Test readback:
... in 0.438089s

$ ls -lh ../*.root
-rw-r--r-- 1 bv bv 6.6M Feb  7 13:00 ../foo.root
-rw-rw-r-- 1 bv bv  38M Feb  5 08:45 ../shower3D_cluster_22_4.root
#+END_EXAMPLE

** Work to do

- move image =TClonesArray=s into own trees
- add to headers references to entries


- maybe remove Cell and just store a packing =context|UwireID|VwireID|WwireID=, add cell maker as alg in Xdata
-  move away from =std::vector= in favor of =TClonesArray= to gain I/O speed.
- validate shower3D conversion
- include celltree level information MC (for now shunt TMC in 2dtoy-shower3d-xdata)
- produce Xdata to Bee conversion (Chao)
- add reader/writer nodes to the Wire Cell Toolkit
- make =xdata-json= optional in the build

